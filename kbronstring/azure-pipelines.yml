# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master
- dev
- feature/*

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7539346d-32b2-4b41-9ee5-b0dfd94b9fa3'
  dockerRegistryServiceConnectionName: 'acrexamreposjIYX'
  imageRepository: 'kbronstring'
  containerRegistry: 'acrexamreposjiyx.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'kbronstring-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment Deployment depends on branch
  ${{ if eq(variables['Build.SourceBranchName'], 'dev') }}:
    environmentDeployment: 'kbronstring.kbronstring-dev'
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    environmentDeployment: 'kbronstring.kbronstring-prod'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'
        addToPath: true
        architecture: 'x64'
    - script: |
        pip install -r requirements.txt
        pytest --junitxml=junit/test-results.xml --cov=. --cov-report=xml 
      displayName: 'Install dependencies and test with pytest'
    
   



    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

# DO NOT MODIFY FROM HERE
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: and(succeeded(), ne(variables['environmentDeployment'], ''))

  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        echo Environment to be deployed: $(environmentDeployment)
      displayName: 'Display Environment to be deployed'

